package model.algorithms.utils;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.Map.Entry;
import java.util.concurrent.ConcurrentLinkedQueue;

public class DCTWorkerpool implements Observer {
	public static final int BLOCK_SIZE = 16;

	public static final float QUANT[] = new float[] { 32.0f, 27.5f, 25.0f,
			40.0f, 60.0f, 100.0f, 127.5f, 152.5f, 152.5f, 152.5f, 152.5f,
			152.5f, 152.5f, 152.5f, 152.5f, 152.5f, 30.0f, 30.0f, 35.0f, 47.5f,
			65.0f, 145.0f, 150.0f, 137.5f, 152.5f, 152.5f, 152.5f, 152.5f,
			152.5f, 152.5f, 152.5f, 152.5f, 35.0f, 32.5f, 40.0f, 60.0f, 100.0f,
			142.5f, 172.5f, 140.0f, 152.5f, 152.5f, 152.5f, 152.5f, 152.5f,
			152.5f, 152.5f, 152.5f, 35.0f, 42.5f, 55.0f, 72.5f, 127.5f, 217.5f,
			200.0f, 155.0f, 152.5f, 152.5f, 152.5f, 152.5f, 152.5f, 152.5f,
			152.5f, 152.5f, 45.0f, 55.0f, 92.5f, 140.0f, 170.0f, 272.5f,
			257.5f, 192.5f, 152.5f, 152.5f, 152.5f, 152.5f, 152.5f, 152.5f,
			152.5f, 152.5f, 60.0f, 87.5f, 137.5f, 160.0f, 202.5f, 260.0f,
			282.5f, 230.0f, 152.5f, 152.5f, 152.5f, 152.5f, 152.5f, 152.5f,
			152.5f, 152.5f, 122.5f, 160.0f, 195.0f, 217.5f, 257.5f, 302.5f,
			300.0f, 252.5f, 152.5f, 152.5f, 152.5f, 152.5f, 152.5f, 152.5f,
			152.5f, 152.5f, 180.0f, 230.0f, 237.5f, 245.0f, 280.0f, 250.0f,
			257.5f, 247.5f, 152.5f, 152.5f, 152.5f, 152.5f, 152.5f, 152.5f,
			152.5f, 152.5f, 180.0f, 180.0f, 180.0f, 180.0f, 180.0f, 180.0f,
			180.0f, 180.0f, 247.5f, 247.5f, 247.5f, 247.5f, 247.5f, 247.5f,
			247.5f, 247.5f, 180.0f, 180.0f, 180.0f, 180.0f, 180.0f, 180.0f,
			180.0f, 180.0f, 247.5f, 247.5f, 247.5f, 247.5f, 247.5f, 247.5f,
			247.5f, 247.5f, 180.0f, 180.0f, 180.0f, 180.0f, 180.0f, 180.0f,
			180.0f, 180.0f, 247.5f, 247.5f, 247.5f, 247.5f, 247.5f, 247.5f,
			247.5f, 247.5f, 180.0f, 180.0f, 180.0f, 180.0f, 180.0f, 180.0f,
			180.0f, 180.0f, 247.5f, 247.5f, 247.5f, 247.5f, 247.5f, 247.5f,
			247.5f, 247.5f, 180.0f, 180.0f, 180.0f, 180.0f, 180.0f, 180.0f,
			180.0f, 180.0f, 247.5f, 247.5f, 247.5f, 247.5f, 247.5f, 247.5f,
			247.5f, 247.5f, 180.0f, 180.0f, 180.0f, 180.0f, 180.0f, 180.0f,
			180.0f, 180.0f, 247.5f, 247.5f, 247.5f, 247.5f, 247.5f, 247.5f,
			247.5f, 247.5f, 180.0f, 180.0f, 180.0f, 180.0f, 180.0f, 180.0f,
			180.0f, 180.0f, 247.5f, 247.5f, 247.5f, 247.5f, 247.5f, 247.5f,
			247.5f, 247.5f, 180.0f, 180.0f, 180.0f, 180.0f, 180.0f, 180.0f,
			180.0f, 180.0f, 247.5f, 247.5f, 247.5f, 247.5f, 247.5f, 247.5f,
			247.5f, 247.5f };

	public static final float DCT[] = new float[] { 4.0f, 5.65685424949238f,
			5.65685424949238f, 5.65685424949238f, 5.65685424949238f,
			5.65685424949238f, 5.65685424949238f, 5.65685424949238f,
			5.65685424949238f, 5.65685424949238f, 5.65685424949238f,
			5.65685424949238f, 5.65685424949238f, 5.65685424949238f,
			5.65685424949238f, 5.65685424949238f, 1.38777878078145e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, -1.66533453693773e-16f,
			-2.35513868802566e-16f, -2.35513868802566e-16f,
			-2.35513868802566e-16f, -2.35513868802566e-16f,
			-2.35513868802566e-16f, -2.35513868802566e-16f,
			-2.35513868802566e-16f, -2.35513868802566e-16f,
			-2.35513868802566e-16f, -2.35513868802566e-16f,
			-2.35513868802566e-16f, -2.35513868802566e-16f,
			-2.35513868802566e-16f, -2.35513868802566e-16f,
			-2.35513868802566e-16f, 3.60822483003176e-16f,
			5.10280049072227e-16f, 5.10280049072227e-16f,
			5.10280049072227e-16f, 5.10280049072227e-16f,
			5.10280049072227e-16f, 5.10280049072227e-16f,
			5.10280049072227e-16f, 5.10280049072227e-16f,
			5.10280049072227e-16f, 5.10280049072227e-16f,
			5.10280049072227e-16f, 5.10280049072227e-16f,
			5.10280049072227e-16f, 5.10280049072227e-16f,
			5.10280049072227e-16f, -1.38777878078145e-16f,
			-1.96261557335472e-16f, -1.96261557335472e-16f,
			-1.96261557335472e-16f, -1.96261557335472e-16f,
			-1.96261557335472e-16f, -1.96261557335472e-16f,
			-1.96261557335472e-16f, -1.96261557335472e-16f,
			-1.96261557335472e-16f, -1.96261557335472e-16f,
			-1.96261557335472e-16f, -1.96261557335472e-16f,
			-1.96261557335472e-16f, -1.96261557335472e-16f,
			-1.96261557335472e-16f, -2.77555756156289e-16f,
			-3.92523114670944e-16f, -3.92523114670944e-16f,
			-3.92523114670944e-16f, -3.92523114670944e-16f,
			-3.92523114670944e-16f, -3.92523114670944e-16f,
			-3.92523114670944e-16f, -3.92523114670944e-16f,
			-3.92523114670944e-16f, -3.92523114670944e-16f,
			-3.92523114670944e-16f, -3.92523114670944e-16f,
			-3.92523114670944e-16f, -3.92523114670944e-16f,
			-3.92523114670944e-16f, -4.71844785465692e-16f,
			-6.67289294940604e-16f, -6.67289294940604e-16f,
			-6.67289294940604e-16f, -6.67289294940604e-16f,
			-6.67289294940604e-16f, -6.67289294940604e-16f,
			-6.67289294940604e-16f, -6.67289294940604e-16f,
			-6.67289294940604e-16f, -6.67289294940604e-16f,
			-6.67289294940604e-16f, -6.67289294940604e-16f,
			-6.67289294940604e-16f, -6.67289294940604e-16f,
			-6.67289294940604e-16f, 6.38378239159465e-16f,
			9.02803163743171e-16f, 9.02803163743171e-16f,
			9.02803163743171e-16f, 9.02803163743171e-16f,
			9.02803163743171e-16f, 9.02803163743171e-16f,
			9.02803163743171e-16f, 9.02803163743171e-16f,
			9.02803163743171e-16f, 9.02803163743171e-16f,
			9.02803163743171e-16f, 9.02803163743171e-16f,
			9.02803163743171e-16f, 9.02803163743171e-16f,
			9.02803163743171e-16f, -5.55111512312578e-17f,
			-7.85046229341888e-17f, -7.85046229341888e-17f,
			-7.85046229341888e-17f, -7.85046229341888e-17f,
			-7.85046229341888e-17f, -7.85046229341888e-17f,
			-7.85046229341888e-17f, -7.85046229341888e-17f,
			-7.85046229341888e-17f, -7.85046229341888e-17f,
			-7.85046229341888e-17f, -7.85046229341888e-17f,
			-7.85046229341888e-17f, -7.85046229341888e-17f,
			-7.85046229341888e-17f, 6.93889390390723e-16f,
			9.81307786677359e-16f, 9.81307786677359e-16f,
			9.81307786677359e-16f, 9.81307786677359e-16f,
			9.81307786677359e-16f, 9.81307786677359e-16f,
			9.81307786677359e-16f, 9.81307786677359e-16f,
			9.81307786677359e-16f, 9.81307786677359e-16f,
			9.81307786677359e-16f, 9.81307786677359e-16f,
			9.81307786677359e-16f, 9.81307786677359e-16f,
			9.81307786677359e-16f, -2.22044604925031e-16f,
			-3.14018491736755e-16f, -3.14018491736755e-16f,
			-3.14018491736755e-16f, -3.14018491736755e-16f,
			-3.14018491736755e-16f, -3.14018491736755e-16f,
			-3.14018491736755e-16f, -3.14018491736755e-16f,
			-3.14018491736755e-16f, -3.14018491736755e-16f,
			-3.14018491736755e-16f, -3.14018491736755e-16f,
			-3.14018491736755e-16f, -3.14018491736755e-16f,
			-3.14018491736755e-16f, 1.38777878078145e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, -2.51187959321442e-15f,
			-3.55233418777204e-15f, -3.55233418777204e-15f,
			-3.55233418777204e-15f, -3.55233418777204e-15f,
			-3.55233418777204e-15f, -3.55233418777204e-15f,
			-3.55233418777204e-15f, -3.55233418777204e-15f,
			-3.55233418777204e-15f, -3.55233418777204e-15f,
			-3.55233418777204e-15f, -3.55233418777204e-15f,
			-3.55233418777204e-15f, -3.55233418777204e-15f,
			-3.55233418777204e-15f, 4.02455846426619e-16f,
			5.69158516272869e-16f, 5.69158516272869e-16f,
			5.69158516272869e-16f, 5.69158516272869e-16f,
			5.69158516272869e-16f, 5.69158516272869e-16f,
			5.69158516272869e-16f, 5.69158516272869e-16f,
			5.69158516272869e-16f, 5.69158516272869e-16f,
			5.69158516272869e-16f, 5.69158516272869e-16f,
			5.69158516272869e-16f, 5.69158516272869e-16f,
			5.69158516272869e-16f, 1.42941214420489e-15f,
			2.02149404055536e-15f, 2.02149404055536e-15f,
			2.02149404055536e-15f, 2.02149404055536e-15f,
			2.02149404055536e-15f, 2.02149404055536e-15f,
			2.02149404055536e-15f, 2.02149404055536e-15f,
			2.02149404055536e-15f, 2.02149404055536e-15f,
			2.02149404055536e-15f, 2.02149404055536e-15f,
			2.02149404055536e-15f, 2.02149404055536e-15f,
			2.02149404055536e-15f, 2.59167687310935e-15f,
			3.66518458323994e-15f, 3.66518458323994e-15f,
			3.66518458323994e-15f, 3.66518458323994e-15f,
			3.66518458323994e-15f, 3.66518458323994e-15f,
			3.66518458323994e-15f, 3.66518458323994e-15f,
			3.66518458323994e-15f, 3.66518458323994e-15f,
			3.66518458323994e-15f, 3.66518458323994e-15f,
			3.66518458323994e-15f, 3.66518458323994e-15f, 3.66518458323994e-15f };

	private ConcurrentLinkedQueue<Integer> blockNumbers;
	private List<Block> dct_blocks;
	private HashMap<DCTWorker, Thread> workerMap;
	private boolean aborted;

	public DCTWorkerpool(float[] input, int width, int height, float quality,
			int paralellTasks) {
		aborted = false;
		dct_blocks = new ArrayList<Block>((width - BLOCK_SIZE + 1)
				* (height - BLOCK_SIZE + 1));

		/*
		 * Create the queue of blocks that should be processed.
		 */
		blockNumbers = new ConcurrentLinkedQueue<Integer>();
		for (int i = 0; i < (width - BLOCK_SIZE + 1)
				* (height - BLOCK_SIZE + 1); i++) {
			blockNumbers.add(i);
		}

		/*
		 * Create the threads...
		 */
		for (int i = 0; i < paralellTasks; i++) {
			DCTWorker worker = new DCTWorker(blockNumbers, input, width,
					quality);
			worker.addObserver(this);
			
			/*
			 * Create the thread
			 */
			Thread wThread = new Thread(worker);
			wThread.start();
			
			/*
			 * Add to the map, so we can later on stop and join to the threads.
			 */
			workerMap.put(worker, wThread);
		}

		for (Thread t : workerMap.values()) {
			try {
				t.join();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	public void abort() {
		for (Entry<DCTWorker, Thread> entry : workerMap.entrySet()) {
			try {
				entry.getKey().abort();
				entry.getValue().join();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		aborted = true;
	}
	
	public boolean getAborted() {
		return aborted;
	}

	@Override
	public void update(Observable o, Object arg) {
		if (arg != null && arg instanceof Block) {
			synchronized (dct_blocks) {
				dct_blocks.add((Block) arg);
			}
		}
	}

	public List<Block> getResult() {
		return dct_blocks;
	}
}
