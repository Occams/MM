package model.algorithms;

import java.awt.image.BufferedImage;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;

import edu.emory.mathcs.jtransforms.dct.FloatDCT_2D;

/**
 * @author huber
 * 
 */
public class CopyMoveRobustMatch extends ICopyMoveDetection {
	private static final int BLOCK_SIZE = 16;

	private static final float QUANT[] = new float[] { 32.0f, 27.5f, 25.0f,
			40.0f, 60.0f, 100.0f, 127.5f, 152.5f, 152.5f, 0.0f, 0.0f, 0.0f,
			0.0f, 0.0f, 0.0f, 0.0f, 30.0f, 30.0f, 35.0f, 47.5f, 65.0f, 145.0f,
			150.0f, 137.5f, 0.0f, 152.5f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
			35.0f, 32.5f, 40.0f, 60.0f, 100.0f, 142.5f, 172.5f, 140.0f, 0.0f,
			0.0f, 152.5f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 35.0f, 42.5f, 55.0f,
			72.5f, 127.5f, 217.5f, 200.0f, 155.0f, 0.0f, 0.0f, 0.0f, 152.5f,
			0.0f, 0.0f, 0.0f, 0.0f, 45.0f, 55.0f, 92.5f, 140.0f, 170.0f,
			272.5f, 257.5f, 192.5f, 0.0f, 0.0f, 0.0f, 0.0f, 152.5f, 0.0f, 0.0f,
			0.0f, 60.0f, 87.5f, 137.5f, 160.0f, 202.5f, 260.0f, 282.5f, 230.0f,
			0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 152.5f, 0.0f, 0.0f, 122.5f, 160.0f,
			195.0f, 217.5f, 257.5f, 302.5f, 300.0f, 252.5f, 0.0f, 0.0f, 0.0f,
			0.0f, 0.0f, 0.0f, 152.5f, 0.0f, 180.0f, 230.0f, 237.5f, 245.0f,
			280.0f, 250.0f, 257.5f, 247.5f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
			0.0f, 152.5f, 180.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
			247.5f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 180.0f,
			0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 247.5f, 0.0f, 0.0f, 0.0f,
			0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 180.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
			0.0f, 0.0f, 247.5f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
			180.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 247.5f, 0.0f,
			0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 180.0f, 0.0f, 0.0f, 0.0f,
			0.0f, 0.0f, 0.0f, 0.0f, 247.5f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
			0.0f, 0.0f, 180.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
			247.5f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 180.0f,
			0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 247.5f, 0.0f, 0.0f, 0.0f,
			0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 180.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
			0.0f, 0.0f, 247.5f };

	private static final float DCT[] = new float[] { 4.0f, 5.65685424949238f,
			5.65685424949238f, 5.65685424949238f, 5.65685424949238f,
			5.65685424949238f, 5.65685424949238f, 5.65685424949238f,
			5.65685424949238f, 5.65685424949238f, 5.65685424949238f,
			5.65685424949238f, 5.65685424949238f, 5.65685424949238f,
			5.65685424949238f, 5.65685424949238f, 1.38777878078145e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, -1.66533453693773e-16f,
			-2.35513868802566e-16f, -2.35513868802566e-16f,
			-2.35513868802566e-16f, -2.35513868802566e-16f,
			-2.35513868802566e-16f, -2.35513868802566e-16f,
			-2.35513868802566e-16f, -2.35513868802566e-16f,
			-2.35513868802566e-16f, -2.35513868802566e-16f,
			-2.35513868802566e-16f, -2.35513868802566e-16f,
			-2.35513868802566e-16f, -2.35513868802566e-16f,
			-2.35513868802566e-16f, 3.60822483003176e-16f,
			5.10280049072227e-16f, 5.10280049072227e-16f,
			5.10280049072227e-16f, 5.10280049072227e-16f,
			5.10280049072227e-16f, 5.10280049072227e-16f,
			5.10280049072227e-16f, 5.10280049072227e-16f,
			5.10280049072227e-16f, 5.10280049072227e-16f,
			5.10280049072227e-16f, 5.10280049072227e-16f,
			5.10280049072227e-16f, 5.10280049072227e-16f,
			5.10280049072227e-16f, -1.38777878078145e-16f,
			-1.96261557335472e-16f, -1.96261557335472e-16f,
			-1.96261557335472e-16f, -1.96261557335472e-16f,
			-1.96261557335472e-16f, -1.96261557335472e-16f,
			-1.96261557335472e-16f, -1.96261557335472e-16f,
			-1.96261557335472e-16f, -1.96261557335472e-16f,
			-1.96261557335472e-16f, -1.96261557335472e-16f,
			-1.96261557335472e-16f, -1.96261557335472e-16f,
			-1.96261557335472e-16f, -2.77555756156289e-16f,
			-3.92523114670944e-16f, -3.92523114670944e-16f,
			-3.92523114670944e-16f, -3.92523114670944e-16f,
			-3.92523114670944e-16f, -3.92523114670944e-16f,
			-3.92523114670944e-16f, -3.92523114670944e-16f,
			-3.92523114670944e-16f, -3.92523114670944e-16f,
			-3.92523114670944e-16f, -3.92523114670944e-16f,
			-3.92523114670944e-16f, -3.92523114670944e-16f,
			-3.92523114670944e-16f, -4.71844785465692e-16f,
			-6.67289294940604e-16f, -6.67289294940604e-16f,
			-6.67289294940604e-16f, -6.67289294940604e-16f,
			-6.67289294940604e-16f, -6.67289294940604e-16f,
			-6.67289294940604e-16f, -6.67289294940604e-16f,
			-6.67289294940604e-16f, -6.67289294940604e-16f,
			-6.67289294940604e-16f, -6.67289294940604e-16f,
			-6.67289294940604e-16f, -6.67289294940604e-16f,
			-6.67289294940604e-16f, 6.38378239159465e-16f,
			9.02803163743171e-16f, 9.02803163743171e-16f,
			9.02803163743171e-16f, 9.02803163743171e-16f,
			9.02803163743171e-16f, 9.02803163743171e-16f,
			9.02803163743171e-16f, 9.02803163743171e-16f,
			9.02803163743171e-16f, 9.02803163743171e-16f,
			9.02803163743171e-16f, 9.02803163743171e-16f,
			9.02803163743171e-16f, 9.02803163743171e-16f,
			9.02803163743171e-16f, -5.55111512312578e-17f,
			-7.85046229341888e-17f, -7.85046229341888e-17f,
			-7.85046229341888e-17f, -7.85046229341888e-17f,
			-7.85046229341888e-17f, -7.85046229341888e-17f,
			-7.85046229341888e-17f, -7.85046229341888e-17f,
			-7.85046229341888e-17f, -7.85046229341888e-17f,
			-7.85046229341888e-17f, -7.85046229341888e-17f,
			-7.85046229341888e-17f, -7.85046229341888e-17f,
			-7.85046229341888e-17f, 6.93889390390723e-16f,
			9.81307786677359e-16f, 9.81307786677359e-16f,
			9.81307786677359e-16f, 9.81307786677359e-16f,
			9.81307786677359e-16f, 9.81307786677359e-16f,
			9.81307786677359e-16f, 9.81307786677359e-16f,
			9.81307786677359e-16f, 9.81307786677359e-16f,
			9.81307786677359e-16f, 9.81307786677359e-16f,
			9.81307786677359e-16f, 9.81307786677359e-16f,
			9.81307786677359e-16f, -2.22044604925031e-16f,
			-3.14018491736755e-16f, -3.14018491736755e-16f,
			-3.14018491736755e-16f, -3.14018491736755e-16f,
			-3.14018491736755e-16f, -3.14018491736755e-16f,
			-3.14018491736755e-16f, -3.14018491736755e-16f,
			-3.14018491736755e-16f, -3.14018491736755e-16f,
			-3.14018491736755e-16f, -3.14018491736755e-16f,
			-3.14018491736755e-16f, -3.14018491736755e-16f,
			-3.14018491736755e-16f, 1.38777878078145e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, 1.96261557335472e-16f,
			1.96261557335472e-16f, -2.51187959321442e-15f,
			-3.55233418777204e-15f, -3.55233418777204e-15f,
			-3.55233418777204e-15f, -3.55233418777204e-15f,
			-3.55233418777204e-15f, -3.55233418777204e-15f,
			-3.55233418777204e-15f, -3.55233418777204e-15f,
			-3.55233418777204e-15f, -3.55233418777204e-15f,
			-3.55233418777204e-15f, -3.55233418777204e-15f,
			-3.55233418777204e-15f, -3.55233418777204e-15f,
			-3.55233418777204e-15f, 4.02455846426619e-16f,
			5.69158516272869e-16f, 5.69158516272869e-16f,
			5.69158516272869e-16f, 5.69158516272869e-16f,
			5.69158516272869e-16f, 5.69158516272869e-16f,
			5.69158516272869e-16f, 5.69158516272869e-16f,
			5.69158516272869e-16f, 5.69158516272869e-16f,
			5.69158516272869e-16f, 5.69158516272869e-16f,
			5.69158516272869e-16f, 5.69158516272869e-16f,
			5.69158516272869e-16f, 1.42941214420489e-15f,
			2.02149404055536e-15f, 2.02149404055536e-15f,
			2.02149404055536e-15f, 2.02149404055536e-15f,
			2.02149404055536e-15f, 2.02149404055536e-15f,
			2.02149404055536e-15f, 2.02149404055536e-15f,
			2.02149404055536e-15f, 2.02149404055536e-15f,
			2.02149404055536e-15f, 2.02149404055536e-15f,
			2.02149404055536e-15f, 2.02149404055536e-15f,
			2.02149404055536e-15f, 2.59167687310935e-15f,
			3.66518458323994e-15f, 3.66518458323994e-15f,
			3.66518458323994e-15f, 3.66518458323994e-15f,
			3.66518458323994e-15f, 3.66518458323994e-15f,
			3.66518458323994e-15f, 3.66518458323994e-15f,
			3.66518458323994e-15f, 3.66518458323994e-15f,
			3.66518458323994e-15f, 3.66518458323994e-15f,
			3.66518458323994e-15f, 3.66518458323994e-15f, 3.66518458323994e-15f };

	public CopyMoveRobustMatch() {
	}

	public void detect(BufferedImage input, float quality, int threshold,
			BufferedImage output) {
		if (!checkImage(input))
			return;

		/*
		 * The image can be processed. First calc grayscale image...
		 */
		float[] grayscale = new float[input.getWidth() * input.getHeight()];
		for (int y = 0; y < input.getHeight(); y++) {
			for (int x = 0; x < input.getWidth(); x++) {
				int pixel = input.getRGB(x, y);
				grayscale[y * BLOCK_SIZE + x] = (float) (((pixel >> 16) & 0xff)
						* 0.299 + ((pixel >> 8) & 0xff) * 0.587 + ((pixel) & 0xff) * 0.114);
			}
		}

		/*
		 * Calculate the dcts of each block...
		 */
		List<float[]> dcts = new LinkedList<float[]>();
		for (int y = 0; y < input.getHeight() / BLOCK_SIZE; y++) {
			for (int x = 0; x < input.getWidth() / BLOCK_SIZE; x++) {
				dcts.add(dct(x * BLOCK_SIZE, y * BLOCK_SIZE, grayscale));
			}
		}
		
		/*
		 * Sort the dcts lexicographically...
		 */
		Comparator<float[]> comparer = new FloatArrayComp();
		Collections.sort(dcts, comparer);
		
		/*
		 * Collect vectors...
		 */
	}

	/**
	 * Checks if the copy move detection can be performed on the given image.
	 * 
	 * @param image
	 * @return
	 */
	private boolean checkImage(BufferedImage image) {
		return true;
	}

	/**
	 * Computes the dct of the given block...
	 * 
	 * @param offs_x
	 * @param offs_y
	 */
	private float[] dct(int offs_x, int offs_y, float[] image) {
		float dct[] = new float[BLOCK_SIZE * BLOCK_SIZE];

		for (int y = 0; y < BLOCK_SIZE; y++) {
			for (int x = 0; x < BLOCK_SIZE; x++) {
				dct[y * BLOCK_SIZE + x] = 0.0f;
				for (int i = 0; i < BLOCK_SIZE; i++) {
					dct[y * BLOCK_SIZE + x] += DCT[y * BLOCK_SIZE * i]
							* image[i * BLOCK_SIZE];
				}
			}
		}

		for (int y = 0; y < BLOCK_SIZE; y++) {
			for (int x = 0; x < BLOCK_SIZE; x++) {
				dct[y * BLOCK_SIZE + x] = 0.0f;
				for (int i = 0; i < BLOCK_SIZE; i++) {
					dct[y * BLOCK_SIZE + x] += dct[y * BLOCK_SIZE * i]
							* DCT[i * BLOCK_SIZE];
				}
			}
		}

		return dct;
	}

	private class FloatArrayComp implements Comparator<float[]> {
		@Override
		public int compare(float[] o1, float[] o2) {
			// TODO Auto-generated method stub
			return 0;
		}
	}

	@Override
	public void abort() {
		// TODO Auto-generated method stub
		
	}
}
